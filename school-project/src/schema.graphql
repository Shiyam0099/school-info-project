type Query {
  schools(findSchool: String, id: ID, page: Int, pageSize: Int): [School!]!
  mySchool(page: Int, pageSize: Int): [School]!
  users(id: ID, page: Int, pageSize: Int): [User!]!
}
type Mutation {
  signup(data: signupInput): signupPayload!
  adminSignup(data: signupInput): signupPayload!
  adminSignin(email: String!, password: String!): adminSigninPayload!
  signin(email: String!, password: String!): signinPayload!
  deleteUser: String!
  adminDeleteUser(usersId: ID!): String!
  updateUser(data: updateUserInput!): User!
  addSchool(data: addSchoolInput): School!
  deleteSchool(id: ID!): String!
  updateSchool(id: ID!, data: updateSchoolInput!): School!
  schoolInfoActiveStatus(schoolId: ID!, active: Boolean!): School!
}

input signupInput {
  name: String!
  email: String!
  password: String!
}

input updateUserInput {
  name: String
  email: String
  password: String
}

input addSchoolInput {
  name: String!
  address: String!
  email: String!
  contact: String!
}
input updateSchoolInput {
  name: String!
  address: String!
  email: String!
  contact: String!
}

type Admin {
  id: ID!
  name: String!
  email: String
  password: String!
  adminProfile: Boolean!
  createdAt: String
  updatedAt: String
}

type School {
  id: ID!
  name: String!
  address: String!
  active: Boolean!
  email: String!
  schoolAdmin: User!
  contact: String
  createdAt: String
  updatedAt: String
}

type User {
  id: ID!
  name: String!
  email: String
  password: String!
  userProfile: Boolean!
  school: [School!]
  createdAt: String
  updatedAt: String
}

type signupPayload {
  message: String!
  user: User!
  token: String!
}
type signinPayload {
  message: String
  user: User
  token: String
}
type adminSigninPayload {
  message: String!
  admin: Admin!
  token: String!
}
